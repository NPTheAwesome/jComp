#!/bin/bash

# Copyright Noah Panepinto circa 2023.
# However this found it's way into your hands, feel free to use, modify and or distribute this code so long as you understand and agree to the following:
#    This code is offered with no warranty, if you use this and it doesnt work, or in any way causes you problems, thats not my problem.
#    If any portion of this code is reused in another project, credit me as the source of the code.
#    If you wish to redistribute this code in it's entirety, do not modify this header.
#    Pinapple should not be on pizza. ever. You will not produce nor request the production of pizza with pinapple as a topping.
# Feel free to contact me at Noah.Ryan.Panepinto@gmail.com if needed.

# Default location of config file

config_directory="./etc/"
executable_directory=""
source_directories_string=""
class_directory=""
        
config_name="config"
manifest_name=""
entry_name=""
creator_name=""
executable_name=""

function help_function {
    echo "jComp: A script by Noah Panepinto used to simplify the compilation of java code."
    echo -e "Usage: jcomp:\n\t-g Generate project | -s Configuration Directory | -i Config Path | -m Manifest Path | -e Entry Point | -b Creator Credit | -d Source Directories | -o Output Name\n\t-h Help  | -r Run | -c Clean | -t Temporary | -v Verbose\n"
    echo -e "\t-g Generate project, directories, configuration files, and hello world program, (Ignores all others)"
    echo -e "\t-s Select configuration directory"
    echo -e "\t-i Select config file name"
    echo -e "\t-m Select existing manifest file (Ignores -e and -b)"
    echo -e "\t-e Select entry point (Project_Name.Class_Name)"
    echo -e "\t-b Designate creator"
    echo -e "\t-d Select directories from which to load source files (Comma seperated)"
    echo -e "\t-o Set executable name"
    echo -e "\t-h See available paramaters and usage information (Ignores all others except -v and -g)"
    echo -e "\t-r Run jar file"
    echo -e "\t-c Delete all class files created"
    echo -e "\t-t Run jar file then delete all files created (Ignores -r and -c)"
    if [ -z $verbose_logging ]; then   
        echo -e "\t-v Print more detailed logging information (use in combination with -h to see detailed info about default behaviour)"
    else
        echo -e "\t-v Print more detailed logging information\n"
        echo -e "\t\tDefault configuration directory is \"./etc/\""
        echo -e "\t\tDefault config file name is \"config\""
        echo -e "\t\tDefault manifest file name is \"auto_manifest\""
        echo -e "\t\tDefault entry point name is \"source.Main\""
        echo -e "\t\tDefault creator name is \"jComp\""
        echo -e "\t\tDefault executable directory is \"./bin/\""
        echo -e "\t\tDefault executable name is \"Main.jar\""
        echo -e "\t\tDefault source directory is \"./source/\""
        echo -e "\t\tDefault class directory is \"./classes/\""
    fi
exit 0 # Exit script after printing help
}

function build_manifest {
    touch $config_directory$manifest_name               # Generate new manifest file and fill in necessary manifest information
    echo "Main-Class: ${entry_name}" >> $config_directory$manifest_name 
    echo "Created-By: ${creator_name}" >> $config_directory$manifest_name 
}

function build_config {
    touch  $config_directory$config_name
    echo "[Main]" >> $config_directory$config_name
    echo "config_directory=\"./etc/\"" >> $config_directory$config_name
    echo "executable_directory=\"./bin/\"" >> $config_directory$config_name
    echo "source_directories_string=\"./source/\"" >> $config_directory$config_name
    echo "class_directory=\"./classes/\"" >> $config_directory$config_name
    echo "" >> $config_directory$config_name
    echo "config_name=\"config\"" >> $config_directory$config_name
    echo "manifest_name=\"auto_manifest\"" >> $config_directory$config_name
    echo "entry_name=\"source.Main\"" >> $config_directory$config_name
    echo "creator_name=\"jComp\"" >> $config_directory$config_name
    echo "executable_name=\"Main.jar\"" >> $config_directory$config_name
    echo -e "\t\t Finished creating configuration file."
    load_config
}

function build_hello_world {
    touch  "./source/Main.java"
    echo -e "package source;" >> "./source/Main.java"
    echo -e "class Main {" >> "./source/Main.java"
    echo -e "\tpublic static void main(String[] args) {" >> "./source/Main.java"
    echo -e "\t\tSystem.out.println(\"Hello World\");" >> "./source/Main.java"
    echo -e "\t}" >> "./source/Main.java"
    echo -e "}" >> "./source/Main.java"
}

function build_system {
    cwd=$(pwd)
    cd $1
    if ! [ -d "./bin" ]; then
        mkdir "./bin"; fi
    if ! [ -d "./classes" ]; then
        mkdir "./classes"; fi
    if ! [ -d "./etc" ]; then
        mkdir "./etc"; fi
    if ! [ -d "./source" ]; then
        mkdir "./source"; fi
    
    if ! [ -z "ls ./etc/config" ]; then
        config_directory="./etc/"
        config_name="config"
        build_config
    fi
    if ! [ -z "ls ./etc/auto_manifest" ]; then
        config_directory="./etc/"
        manifest_name="auto_manifest"
        entry_name="source.Main"
        entry_name="jComp"
        build_manifest
    fi
    if ! [ -z "ls ./source/Main.java" ]; then
        build_hello_world; fi
    cd $cwd
    exit 0
}

function load_value {
    $value=$(grep "$1" "$2" | sed 's/ *= */=/g' | grep -o '".*"' | sed 's/"//g')
    echo -e "$value"
}

function load_config {
    if ! [ -z $verbose_logging ]; then
        echo "Loading configuration data."
    fi
    if test -f "$config_directory$config_name"; then 
        executable_directory=$(grep "executable_directory" "$config_directory$config_name" | grep -o '".*"' | sed 's/"//g')
        source_directories_string=$(grep "source_directories_string" "$config_directory$config_name" | grep -o '".*"' | sed 's/"//g')
        class_directory=$(grep "class_directory" "$config_directory$config_name" | grep -o '".*"' | sed 's/"//g')
        
        manifest_name=$(grep "manifest_name" "$config_directory$config_name" | grep -o '".*"' | sed 's/"//g')
        entry_name=$(grep "entry_name" "$config_directory$config_name" | grep -o '".*"' | sed 's/"//g')
        creator_name=$(grep "creator_name" "$config_directory$config_name" | grep -o '".*"' | sed 's/"//g')
        executable_name=$(grep "executable_name" "$config_directory$config_name" | grep -o '".*"' | sed 's/"//g')
        if ! [ -z $verbose_logging ]; then   
            echo -e "\texecutable_directory is set to \"$executable_directory\""
            echo -e "\tsource_directories_string is set to \"$source_directories_string\""
            echo -e "\tclass_directory is set to \"$class_directory\""

            echo -e "\tmanifest_name is set to \"$manifest_name\""
            echo -e "\tentry_name is set to \"$entry_name\""
            echo -e "\tcreator_name is set to \"$creator_name\""
            echo -e "\texecutable_name is set to \"$executable_name\""
        fi
    else
        echo -e "\tConfiguration file not found, generating new configuration file with default values."
        build_config
    fi
    echo -e "Finished loading configuration data.\n"
}

function load_parameters {
    if ! [ -z $verbose_logging ]; then
        echo "Loading user parameters."
    fi
    if ! [ -z $para_source_directories_string ]; then
        source_directories_string=$para_source_directories_string;
        if ! [ -z $verbose_logging ]; then
            echo -e "\tsource_directories_string is overridden to \"$source_directories_string\""; fi
    fi
    if ! [ -z $para_manifest_name ]; then
        manifest_name=$para_manifest_name
        if ! [ -z $verbose_logging ]; then
            echo -e "\tmanifest_name is overridden to \"$manifest_name\""; fi
    fi
    if ! [ -z $para_entry_name ]; then
        entry_name=$para_entry_name;
        if ! [ -z $verbose_logging ]; then
            echo -e "\tentry_name is overridden to \"$entry_name\""; fi
    fi
    if ! [ -z $para_creator_name ]; then
        creator_name=$para_creator_name;
        if ! [ -z $verbose_logging ]; then
            echo -e "\tcreator_name is overridden to \"$creator_name\""; fi
    fi
    if ! [ -z $para_executable_name ]; then
        executable_name=$para_executable_name;
        if ! [ -z $verbose_logging ]; then
            echo -e "\texecutable_name is overridden to \"$executable_name\""; fi
    fi
    echo -e "Finished loading user parameters.\n"
}

function load {
    load_config

    load_parameters
}

function split {
    if ! [ -z $verbose_logging ]; then
        echo "Finding source directories."
    fi
    IFS=,                                               # Set character to split string on to ','
    for i in $source_directories_string; do             # For each string created after spliting
        temp=$i                                         # Copy string to temp
        if [ ${temp: -1} != "/" ]; then                 # If temp does not end in '/' 
            temp+="/"                                   # Append '/' to the end of temp
        fi
        if ! [ -z $verbose_logging ]; then
            echo -e "\tAdding \"$temp\" to source directories."
        fi
        source_directories+=($temp)                     # Append temp to list of source directories
    done
    echo -e "Finding source directories completed.\n"
}

function compile {

    if ! [ -z $verbose_logging ]; then
        echo -e "Compiling and packaging code.\nHandling manifest."
    fi
    if [ -z $custom_manifest ]; then                    # If manifest file has not been specified by user
        if test -f "$config_directory$manifest_name"; then
            rm $config_directory$manifest_name
        fi
        build_manifest
        if ! [ -z $verbose_logging ]; then
            echo "Generating new manifest file."
            echo -e "\tMain-Class is \"${entry_name}\""
            echo -e "\tCreator is \"${creator_name}\""
        fi
    else                                                # Else if manifest file has been specified by user
        if ! [ -z $verbose_logging ]; then
            echo "Using user made manifest file."
            echo -e "\tManifest file is at \"$config_directory${manifest_name}\""
        fi                                             
    fi
    if ! [ -z $verbose_logging ]; then
        echo "Compiling source files."
    fi
    for dir in ${source_directories[@]}; do
        if ! [ -z $verbose_logging ]; then
            echo -e "\tScanning \"$dir\""
        fi     
        for file in $dir*.java; do                      # For all specified source code directories
            javac -d $class_directory $file             # Compile source code to classes directory
            if ! [ -z $verbose_logging ]; then
                echo -e "\t\tCompiling \"$file\""
            fi
        done
    done   
    cwd=$(pwd)/
    cd $class_directory
    if ! [ -z $verbose_logging ]; then                  # Package all class files together
        echo "Packaging code into \"$executable_directory$executable_name\""
        jar cvfm $cwd$executable_directory$executable_name $cwd$config_directory$manifest_name */*.class 
    else
        jar cfm $cwd$executable_directory$executable_name $cwd$config_directory$manifest_name */*.class 
    fi                                                
    cd $cwd
    echo -e "Compilation completed.\n"
}

function clean_classes {
    if ! [ -z $verbose_logging ]; then
        echo -e "Cleaning up .class files"
    fi
    for dir in $class_directory*; do                    # For each class directory
        if ! [ -z $verbose_logging ]; then
            echo -e "\tScanning \"$dir\""
        fi
        if ! [ -z "ls $dir" ]; then                     # If directory isn't empty
            for file in $dir/*.class; do
                if test -f "$file"; then
                    if ! [ -z $verbose_logging ]; then
                        echo -e "\t\tRemoving \"$file\""
                    fi
                    rm $file                            # Remove class file
                fi
            done
        fi
    done
}

function pre_clean {
    clean_classes                                       # Remove class files
    if ! [ -z $verbose_logging ]; then
        echo -e "Cleaning up .jar file."
    fi
    if test -f "$executable_directory$executable_name"; then
        if ! [ -z $verbose_logging ]; then
            echo -e "\tRemoving \"$executable_directory$executable_name\""
        fi                    
        rm $executable_directory$executable_name        # Remove jar file
    fi
    echo -e "Pre-Cleaning completed.\n"
}

function temporary {
    if ! [ -z $verbose_logging ]; then
        echo -e "Temporarily running \"$executable_directory$executable_name\"\n"
    fi
    java -jar $executable_directory$executable_name     # Run jar file
    echo -e "Program exited." 
    clean_classes                                       # Remove class files
    if test -f "$executable_directory$executable_name"; then
        if ! [ -z $verbose_logging ]; then
            echo -e "\tRemoving \"$executable_directory$executable_name\""
        fi  
        rm $executable_directory$executable_name        # Remove jar file
    fi
    echo -e "Post-Cleaning completed.\n"
    exit 1                                              # Exit script
}

function main {
    if ! [ -z $need_help ]; then                        # If -h flag is passed, run help function and exit
        help_function
    fi

    load

    split                                               # Split user defined source directory list by commas
    pre_clean                                           # Delete existing binaries ahead of compilation
    compile                                             # Compile source code into binaries

    if ! [ -z $temporary ]; then                        # If -t flag is passed, run temporary function and exit
        temporary
    fi
    if ! [ -z $run ]; then                              # If -r flag is passed, run jar file 
        echo -e "Running \"$executable_directory$executable_name\"\n"
        java -jar $executable_directory$executable_name
    fi
    if ! [ -z $post_cleaning ]; then                    # If -c flag is passed, clean up class files
        echo ""
        clean_classes
        echo -e "Post-Cleaning completed.\n"
    fi
}

while getopts "g:s:i:m:e:b:d:o:hrctv" opt; do
    case "$opt" in
        g ) build_system $OPTARG ;;
        s ) config_directory="$OPTARG" ;;
        i ) config_name=$OPTARG ;;
        m ) para_manifest_name="$OPTARG" ;;  
        e ) para_entry_name="$OPTARG" ;;
        b ) para_creator_name="$OPTARG" ;;
        d ) para_source_directories_string="$OPTARG" ;;
        o ) para_executable_name="$OPTARG" ;;
        h ) need_help="TRUE" ;;
        r ) run="TRUE" ;;
        c ) post_cleaning="TRUE" ;;
        t ) temporary="TRUE" ;;
        v ) verbose_logging="TRUE" ;;
        ? ) echo -e "You entered an illegal flag, we'll show you the help page now.\n"
            help_function ;;
    esac
done

main

exit 0                                                  # Exit script at the end of operation